 1 #include <iostream>
  2 #include <cmath>
  3 
  4 using namespace std;
  5 
  6 class QuadraticException : public exception
  7 {
  8     public:
  9         const char * what() const throw()
 10         {
 11             return "Quadratic Fail";
 12         }
 13 };
 14 
 15 class BadDiscriminant : public QuadraticException
 16 {
 17     public:
 18         const char * what() const throw()
 19         {
 20             return "Bad Discriminant";
 21         }
 22 };
 23 
 24 class BadDenom : public QuadraticException
 25 {
 26     public:
 27         const char * what() const throw()
 28         {
 29             return "Bad Denominator";
 30         }
 31 };
 32 
 33 class Quadratic
 34 {
 35     private:
 36         double a, b, c;
 37         double calc_root1()
 38         {
 39             double disc = b * b - 4 * a * c;
 40             double denom = 2 * a;
 41 
 42             if (denom == 0)
 43                 throw BadDenom();
 44             if (disc < 0)
 45                 throw BadDiscriminant();
 46 
 47             return (-b + pow(disc, 0.5)) / denom;
 48         }
 49         double calc_root2()
 50         {
 51             double disc = b * b - 4 * a * c;
 52             double denom = 2 * a;
 53 
 54             if (denom == 0)
 55                 throw BadDenom();
 56             if (disc < 0)
 57                 throw BadDiscriminant();
 58 
 59             return (-b - pow(disc, 0.5)) / denom;
 60         }
 61 
 62     public:
 63         Quadratic(double aa, double bb, double cc) : a(aa), b(bb), c(cc) {}
 64         void solve(double &root1, double & root2)
 65         {
 66             root1 = calc_root1();
 67             root2 = calc_root2();
 68         }
 69 
 70 };
 71 
 72 int main()
 73 {
 74     double root1, root2;
 75     /*
 76     Quadratic q1(1, 1, -6);
 77 
 78     q1.solve(root1, root2);
 79     cout << root1 << " " << root2 << endl;
 80     */
 81 
 82     try
 83     {
 84         Quadratic q2(0, 1, 6);
 85         q2.solve(root1, root2);
 86         cout << root1 << " " << root2 << endl;
 87     }
 88     /*
 89     catch (BadDiscriminant & ex)
 90     {
 91         cerr << ex.what() << endl;
 92     }
 93     catch (BadDenom & ex)
 94     {
 95         cerr << ex.what() << endl;
 96     }
 97     */
 98     catch (QuadraticException & ex)
 99     {
100         cerr << ex.what() << endl;
101     }
102     catch (...)
103     {
104         cerr << "!!!" << endl;
105     }
106 
107 
108 
109 
110 
111     return 0;
112 }
