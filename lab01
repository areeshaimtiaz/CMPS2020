#include <iostream>
using namespace std;

class Sensor
{
    private:
        string name;
        bool is_open;
        bool bypassed;
    
    public:
        Sensor() {}

        Sensor(string n, bool byp = false, bool io = false)
 15         {
 16             name = n;
 17             is_open = io;
 18             bypassed = byp;
 19         }
 20 
 21         bool get_is_open() const // Accessor
 22         {
 23             return is_open;
 24         }
 25 
 26         bool get_bypassed() const // Accessor
 27         {
 28             return bypassed;
 29         }
 30 };
 31 
 32 Sensor * create(string name, bool is_bypassed, bool is_open)
 33 {
 34     Sensor * s1 = new Sensor(name, is_bypassed, is_open);
 35     return s1;
 36 }
 37 
 38 class Location
 39 {
40     private:
 41         Sensor * sensors[100];
 42         int count;  // keeps track of sensors added to array
 43         int opensensors = 0;
 44         int bypassedsensors = 0;
 45         bool armed;
 46     public:
 47         Location()
 48         {
 49             count = 0;
 50             armed = false;
 51         }
 52 
 53         void add(string name, bool byp, bool io)
 54         {
 55             sensors[count] = create(name, byp, io); // assigns the address of the new sensor to the vacant sensor array slot
 56             count++;
 57         }
 58 
 59         bool arm()
 60         {
 61             bool flag = true;
 62 
 63             for (int i = 0; i < count; i++)
 64             {
 65                 if (sensors[i]->get_is_open())
 66                 {
 67                     opensensors++;
 68                 }
 69 
 70                 if (sensors[i]->get_bypassed())
 71                 {
 72                     bypassedsensors++;
 73                 }
 74 
 75                 if (sensors[i]->get_is_open())
 76                 {
 77                     if (!sensors[i]->get_bypassed())
 78                     {
79                         flag = false;
 80                     }
 81                 }
 82             }
 83             return flag;
 84         }
 85         ~ Location()
 86         {
 87             for (int i = 0; i < count; i++)
 88             {
 89                 sensors[i] = NULL;
 90             }
 91         }
 92 
 93         int get_opensensors() const // Accessor
 94         {
 95             return opensensors;
 96         }
 97 
 98         int get_bypassedsensors() const // Accessor
 99         {
100             return bypassedsensors;
101         }
102 };
103 
104 int main()
105 {
106     int sensors, x = 0;
107     string sensorname;
108     char input;
109     bool isopen, isbyp;
110 
111     cout << "How many sensors are installed? ";
112     cin >> sensors;
113 
114     string faults[sensors];
115 
116     Location home;
117 
118     for (int i = 0; i < sensors; i++)
119     {
120         cout << "Name this sensor: ";
121         cin >> sensorname;
122 
123         cout << "Is " << sensorname << " currently open? ";
124         cin >> input;
125         isopen = input == 'y';
126 
127         if (input == 'y')
128         {
129             faults[x] = sensorname;
130             x = x + 1;
131         }
132 
133         cout << "Bypass " << sensorname << "? ";
134         cin >> input;
135         isbyp = input == 'y';
136 
137         home.add(sensorname, isbyp, isopen);
138     }
139 
140     if (home.arm())
141     {
142         cout << "Alarm system is armed. " << home.get_bypassedsensors() << " sensor(s) bypassed." << endl;
143     }
144     else
145     {
146         cout << "Cannot arm system. " << home.get_opensensors() << " sensor(s) opened." << endl;
147     }
148 
149     // EXTRA CREDIT
150     // Sample output:
151     // Cannot arm system. Open sensors : Kitchen, Garage
152     // display which sensors are opened
153     // make sure to not violate OOP rules of encapsulation
154     // No cins/couts from within any classes
155 
156     cout << "Open sensors: ";
157     for (int j = 0; j < x; j++)
158     {
159         cout << faults[j] << " ";
160     }
161     cout << endl;
162 
163     return 0;
164 }
