#include <iostream>
using namespace std;

class Sensor
{
    private:
        string name;
        bool is_open;
        bool bypassed;
    
    public:
        Sensor() {}

        Sensor(string n, bool byp = false, bool io = false)
        {
            name = n;
            is_open = io;
            bypassed = byp;
        }

        bool get_is_open() const // Accessor
        {
            return is_open;
        }

        bool get_bypassed() const // Accessor
        {
            return bypassed;
        }
};

Sensor * create(string name, bool is_bypassed, bool is_open)
{
    Sensor * s1 = new Sensor(name, is_bypassed, is_open);
    return s1;
}

class Location
{
    private:
        Sensor * sensors[100];
        int count;  // keeps track of sensors added to array
        int opensensors = 0;
        int bypassedsensors = 0;
        bool armed;
    public:
        Location()
        {
            count = 0;
            armed = false;
        }

        void add(string name, bool byp, bool io)
        {
            sensors[count] = create(name, byp, io); // assigns the address of the new sensor to the vacant sensor array slot
            count++;
        }

        bool arm()
        {
            bool flag = true;

            for (int i = 0; i < count; i++)
            {
                if (sensors[i]->get_is_open())
                {
                    opensensors++;
                }

                if (sensors[i]->get_bypassed())
                {
                    bypassedsensors++;
                }

                if (sensors[i]->get_is_open())
                {
                    if (!sensors[i]->get_bypassed())
                    {
                        flag = false;
                    }
                }
            }
            return flag;
        }
        ~ Location()
        {
            for (int i = 0; i < count; i++)
            {
                sensors[i] = NULL;
}
 91         }
 92 
 93         int get_opensensors() const // Accessor
 94         {
 95             return opensensors;
 96         }
 97 
 98         int get_bypassedsensors() const // Accessor
 99         {
100             return bypassedsensors;
101         }
102 };
103 
104 int main()
105 {
106     int sensors, x = 0;
107     string sensorname;
108     char input;
109     bool isopen, isbyp;
110 
111     cout << "How many sensors are installed? ";
112     cin >> sensors;
113 
114     string faults[sensors];
115 
116     Location home;
117 
118     for (int i = 0; i < sensors; i++)
119     {
120         cout << "Name this sensor: ";
121         cin >> sensorname;
122 
123         cout << "Is " << sensorname << " currently open? ";
124         cin >> input;
125         isopen = input == 'y';
126 
127         if (input == 'y')
128         {
129             faults[x] = sensorname;
130             x = x + 1;
131         }
132 
133         cout << "Bypass " << sensorname << "? ";
134         cin >> input;
135         isbyp = input == 'y';
136 
137         home.add(sensorname, isbyp, isopen);
138     }
139 
140     if (home.arm())
141     {
142         cout << "Alarm system is armed. " << home.get_bypassedsensors() << " sensor(s) bypassed." << endl;
143     }
144     else
145     {
146         cout << "Cannot arm system. " << home.get_opensensors() << " sensor(s) opened." << endl;
147     }
148 
149     // EXTRA CREDIT
150     // Sample output:
151     // Cannot arm system. Open sensors : Kitchen, Garage
152     // display which sensors are opened
153     // make sure to not violate OOP rules of encapsulation
154     // No cins/couts from within any classes
155 
156     cout << "Open sensors: ";
157     for (int j = 0; j < x; j++)
158     {
159         cout << faults[j] << " ";
160     }
161     cout << endl;
162 
163     return 0;
164 }
