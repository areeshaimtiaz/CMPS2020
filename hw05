#include <iostream>
#include <string>
using namespace std;

// declare function pointers 

// this function pointer can point to a function that performs comparisons
// the function can be named anything as long as it
//   - returns a bool
//   - has 2 integer parameters
typedef bool (*comparer)(int, int);

// this function pointer can point to a function that sorts an array, using a comparison function
// passed in the third parameter 
// the function can be named anything as long as it
//   - is a void 
//   - it has three parameters: an array, an integer, and a pointer to a comparer function
typedef void (*sorter)(int *, int, comparer);

int const SIZE = 20;
int UNSORTED[SIZE] = { 15, 1, 3, 25, 8, 11, 9, 34, 17, 12, 7, 18, 2, 14, 19, 50, 23, 26, 16, 10 };

class QuadSort
{
    public:
        int data[SIZE];

        // sort is being declared as a pointer to a function of type "sorter"
        sorter sort;

        QuadSort()
        {
            // currently, the sorter function doesn't point to anything
            sort = NULL;
        }

        friend void show_data(QuadSort & qs);
};

void show_data(QuadSort & qs)
{
    for (int i = 0; i < SIZE; i++)
    {
        cout << qs.data[i] << " ";
    }
    cout << endl;
}

// prototypes for comparer functions
bool increasing(int, int);
bool decreasing(int, int);
// a strange comparison algorithm 
bool strange(int, int);

// prototypes for sorter functions
void selection_sort(int *, int, comparer);
void insertion_sort(int *, int, comparer);
void bubble_sort(int *, int, comparer);

void copy_array(int *, int *, int);

int main()
{
    QuadSort quad;

    // copy the unsorted data into our temp array
    copy_array(UNSORTED, quad.data, SIZE);

    // now call the selection sorter ------------------------------
    // and sort by increasing
    // the sorting algorithm is assigned to the .sort property
    // the sort() function is passed the name of the increasing() function
    // passing in the increasing function in the 3rd parameter uses that
    // function for sorting in increasing order
    quad.sort = selection_sort;
    quad.sort(quad.data, SIZE, increasing);
    
    // display data
    cout << "\nSorted using Selection (increasing): " << endl;
    show_data(quad);
    
    // now call the insertion sorter ------------------------------
    // uncomment the line below if you want to use unsorted data
    // for your insertion sort. If you don't, your data will already
    // have been sorted by selection above
    // copy_array(UNSORTED, quad.data, SIZE);
    quad.sort = insertion_sort;
    quad.sort(quad.data, SIZE, decreasing);

    // display data
    cout << "\nSorted using Insertion (decreasing): " << endl;
    show_data(quad);

    // now call the bubble sorter --------------------------------
    quad.sort = bubble_sort;
    quad.sort(quad.data, SIZE, increasing);

    // display data
    cout << "\nSorted using Bubble (increasing): " << endl;
    show_data(quad);

    // TODO: now call the bubble sorter, using the "strange" order
    // - assign the bubble_sort as the sorting algorithm
    // - call the sort() using the strange comparer
    quad.sort = bubble_sort;
    quad.sort(quad.data, SIZE, strange);

    // display data
    cout << "\nSorted using Bubble (in strange order): " << endl;
    show_data(quad);

    cout << endl;

    return 0;
}

void copy_array(int * src, int * dest, int size)
{
    for (int i = 0; i < size; i++)
    {
        *(dest + i) = *(src + i);
    }
}

void selection_sort(int * array, int size, comparer fncompare)
{
    // TODO: Write a selection sort to sort 'array'
    // implement the selection sort algorithm
    // be sure to use the fncompare() function to do any
    // comparisons to determine sort order (see bubble_sort example)
    for (int i = 0; i < size - 1; i++)
    {
        int minIndex = i;
        for (int j = i + 1; j < size; j++)
        {
            // Use the fncompare function to determine the sort order
            if (fncompare(array[j], array[minIndex]))
            {
                minIndex = j;
            }
        }
        // Swap the elements
        if (minIndex != i)
        {
            int temp = array[i];
            array[i] = array[minIndex];
            array[minIndex] = temp;
        }
    }
}

void insertion_sort(int * array, int size, comparer fncompare)
{
    // TODO: Write an insertion sort to sort 'array'
    // implement the insertion sort algorithm
    // be sure to use the fncompare() function to do any
    // comparisons to determine sort order (see bubble_sort example)
    for (int i = 1; i < size; i++)
    {
        int key = array[i];
        int j = i - 1;

        // Move elements that are greater than the key to one position ahead of their current position 
        while ((j >= 0) && (fncompare(key, array[j])))
        {
            array[j + 1] = array[j];
            j = j - 1;
        }

        // Place the key in its correct position
        array[j + 1] = key;
    }
}

void bubble_sort(int * array, int size, comparer fncompare)
{
    // implement the bubble sort algorithm
    int temp;
    int i = 0;
    bool swapped = true;
    while ((i < size - 1) && (swapped))
    {
        swapped = false;
        for (int j = 0; j < size - 1; j++)
        {
            // fncompare is a parameter of type comparer
            // it will return a boolean value that says
            // its parameters are sorted
            // the comparer function determines the sort order
            if (fncompare(array[j + 1], array[j]))
            {
                temp = array[j + 1];
                array[j + 1] = array[j];
                array[j] =  temp;

                // set flags to continue swapping
                swapped = true;
                i = 0;
            }
        }
        i = i + 1;
    }
}

bool strange(int lhs, int rhs)
{
    // alphabetizing numbers
    // 1 - o, 2 - t, 3 - t, 
    //
    // TODO: Implement the 'strange' comparison
    // here's the description for the 'strange' sort
    // take lhs, and get the 1st digit of the number
    // for example, if it's 900, the 1st digit is 9
    //
    // also take the 1st digit of rhs
    // for example, if it's 600, the 1st digit is 6
    // now, map 9 (lhs) to its english word => 'nine'
    //      map 6 (rhs) to its english word => 'six'
    // take the 1st character of 'nine' => 'n'
    // take the 1st character of 'six'  => 's'
    // 
    // now do an alphabetized sort on the 1st character
    // of lhs versus the 1st character of rhs
    // in this example, 'n' IS less than 's'
    // which would mean that for this strange comparison
    // 900 is less than 600
    //
    // set the return value based on this strange sort
    
    // Get the first digit of lhs
    int lhsFirstDigit = (lhs >= 10)? abs(lhs / 10): lhs;
    
    // Get the first digit of rhs
    int rhsFirstDigit = (rhs >=10)? abs(rhs / 10): rhs;

    // Map the first digit of lhs to its English word
    string lhsWord;
    switch (lhsFirstDigit)
    {
        case 1:
            lhsWord = "one";
            break;
        case 2:
            lhsWord = "two";
            break;
        case 3:
            lhsWord = "three";
            break;
        case 4:
            lhsWord = "four";
            break;
        case 5:
            lhsWord = "five";
            break;
        case 6:
            lhsWord = "six";
            break;
        case 7:
            lhsWord = "seven";
            break;
        case 8:
            lhsWord = "eight";
            break;
        case 9:
            lhsWord = "nine";
            break;
        default:
            lhsWord = "";
            break;
    }

    // Map the first digit of rhs to its English word
    string rhsWord;
    switch (rhsFirstDigit)
    {
        case 1:
            rhsWord = "one";
            break;
        case 2:
            rhsWord = "two";
            break;
        case 3:
            rhsWord = "three";
            break;
        case 4:
            rhsWord = "four";
            break;
        case 5:
            rhsWord = "five";
            break;
        case 6:
            rhsWord = "six";
            break;
        case 7:
            rhsWord = "seven";
            break;
        case 8:
            rhsWord = "eight";
            break;
        case 9:
            rhsWord = "nine";
            break;
        default:
            rhsWord = "";
            break;
    }

    // Compare the first characters of the English words alphabetically
    return lhsWord[0] < rhsWord[0];

    return true;
}

bool increasing(int lhs, int rhs)
{
    return lhs < rhs;
}

bool decreasing(int lhs, int rhs)
{
    return lhs > rhs;
}
