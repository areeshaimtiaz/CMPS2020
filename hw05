#include <iostream>
#include <string>
using namespace std;

// declare function pointers 

// this function pointer can point to a function that performs comparisons
// the function can be named anything as long as it
//   - returns a bool
//   - has 2 integer parameters
typedef bool (*comparer)(int, int);

// this function pointer can point to a function that sorts an array, using a comparison function
// passed in the third parameter 
// the function can be named anything as long as it
//   - is a void 
//   - it has three parameters: an array, an integer, and a pointer to a comparer function
typedef void (*sorter)(int *, int, comparer);

int const SIZE = 20;
int UNSORTED[SIZE] = { 15, 1, 3, 25, 8, 11, 9, 34, 17, 12, 7, 18, 2, 14, 19, 50, 23, 26, 16, 10 };

class QuadSort
{
    public:
        int data[SIZE];

        // sort is being declared as a pointer to a function of type "sorter"
        sorter sort;

        QuadSort()
        {
            // currently, the sorter function doesn't point to anything
            sort = NULL;
        }

        friend void show_data(QuadSort & qs);
};

void show_data(QuadSort & qs)
{
    for (int i = 0; i < SIZE; i++)
    {
        cout << qs.data[i] << " ";
    }
    cout << endl;
}

// prototypes for comparer functions
bool increasing(int, int);
bool decreasing(int, int);
// a strange comparison algorithm 
bool strange(int, int);

// prototypes for sorter functions
void selection_sort(int *, int, comparer);
void insertion_sort(int *, int, comparer);
void bubble_sort(int *, int, comparer);

void copy_array(int *, int *, int);

int main()
{
    QuadSort quad;

    // copy the unsorted data into our temp array
    copy_array(UNSORTED, quad.data, SIZE);

    // now call the selection sorter ------------------------------
    // and sort by increasing
    // the sorting algorithm is assigned to the .sort property
    // the sort() function is passed the name of the increasing() function
    // passing in the increasing function in the 3rd parameter uses that
    // function for sorting in increasing order
    quad.sort = selection_sort;
    quad.sort(quad.data, SIZE, increasing);
    
    // display data
    cout << "\nSorted using Selection (increasing): " << endl;
    show_data(quad);
    
    // now call the insertion sorter ------------------------------
    // uncomment the line below if you want to use unsorted data
    // for your insertion sort. If you don't, your data will already
    // have been sorted by selection above
    // copy_array(UNSORTED, quad.data, SIZE);
    quad.sort = insertion_sort;
    quad.sort(quad.data, SIZE, decreasing);

    // display data
    cout << "\nSorted using Insertion (decreasing): " << endl;
    show_data(quad);

    // now call the bubble sorter --------------------------------
    quad.sort = bubble_sort;
    quad.sort(quad.data, SIZE, increasing);

    // display data
    cout << "\nSorted using Bubble (increasing): " << endl;
    show_data(quad);

    // TODO: now call the bubble sorter, using the "strange" order
    // - assign the bubble_sort as the sorting algorithm
    // - call the sort() using the strange comparer
    quad.sort = bubble_sort;
    quad.sort(quad.data, SIZE, strange);

    // display data
    cout << "\nSorted using Bubble (in strange order): " << endl;
    show_data(quad);

    cout << endl;

    return 0;
}

void copy_array(int * src, int * dest, int size)
{
    for (int i = 0; i < size; i++)
    {
        *(dest + i) = *(src + i);
    }
}

void selection_sort(int * array, int size, comparer fncompare)
125 {
126     // TODO: Write a selection sort to sort 'array'
127     // implement the selection sort algorithm
128     // be sure to use the fncompare() function to do any
129     // comparisons to determine sort order (see bubble_sort example)
130     for (int i = 0; i < size - 1; i++)
131     {
132         int minIndex = i;
133         for (int j = i + 1; j < size; j++)
134         {
135             // Use the fncompare function to determine the sort order
136             if (fncompare(array[j], array[minIndex]))
137             {
138                 minIndex = j;
139             }
140         }
141         // Swap the elements
142         if (minIndex != i)
143         {
144             int temp = array[i];
145             array[i] = array[minIndex];
146             array[minIndex] = temp;
147         }
148     }
149 }
150 
151 void insertion_sort(int * array, int size, comparer fncompare)
152 {
153     // TODO: Write an insertion sort to sort 'array'
154     // implement the insertion sort algorithm
155     // be sure to use the fncompare() function to do any
156     // comparisons to determine sort order (see bubble_sort example)
157     for (int i = 1; i < size; i++)
158     {
159         int key = array[i];
160         int j = i - 1;
161 
162         // Move elements that are greater than the key to one position ahead of their current position
163         while ((j >= 0) && (fncompare(key, array[j])))
164         {
165             array[j + 1] = array[j];
166             j = j - 1;
167         }
168 
169         // Place the key in its correct position
170         array[j + 1] = key;
171     }
172 }
173 
174 void bubble_sort(int * array, int size, comparer fncompare)
175 {
176     // implement the bubble sort algorithm
177     int temp;
178     int i = 0;
179     bool swapped = true;
180     while ((i < size - 1) && (swapped))
181     {
182         swapped = false;
183         for (int j = 0; j < size - 1; j++)
184         {
185             // fncompare is a parameter of type comparer
186             // it will return a boolean value that says
187             // its parameters are sorted
188             // the comparer function determines the sort order
189             if (fncompare(array[j + 1], array[j]))
190             {
191                 temp = array[j + 1];
192                 array[j + 1] = array[j];
193                 array[j] =  temp;
194 
195                 // set flags to continue swapping
196                 swapped = true;
197                 i = 0;
198             }
199         }
200         i = i + 1;
201     }
202 }
203 
204 bool strange(int lhs, int rhs)
205 {
206     // alphabetizing numbers
207     // 1 - o, 2 - t, 3 - t, 
208     //
209     // TODO: Implement the 'strange' comparison
210     // here's the description for the 'strange' sort
211     // take lhs, and get the 1st digit of the number
212     // for example, if it's 900, the 1st digit is 9
213     //
214     // also take the 1st digit of rhs
215     // for example, if it's 600, the 1st digit is 6
216     // now, map 9 (lhs) to its english word => 'nine'
217     //      map 6 (rhs) to its english word => 'six'
218     // take the 1st character of 'nine' => 'n'
219     // take the 1st character of 'six'  => 's'
220     // 
221     // now do an alphabetized sort on the 1st character
222     // of lhs versus the 1st character of rhs
223     // in this example, 'n' IS less than 's'
224     // which would mean that for this strange comparison
225     // 900 is less than 600
226     //
227     // set the return value based on this strange sort
228 
229 
230     // Get the first digit of lhs
231     int lhsFirstDigit = (lhs >= 10)? abs(lhs / 10): lhs;
232 
233     // Get the first digit of rhs
234     int rhsFirstDigit = (rhs >=10)? abs(rhs / 10): rhs;
235 
236     // Map the first digit of lhs to its English word
237     string lhsWord;
238     switch (lhsFirstDigit)
239     {
240         case 1:
241             lhsWord = "one";
242             break;
243         case 2:
244             lhsWord = "two";
245             break;
246         case 3:
247             lhsWord = "three";
248             break;
249         case 4:
250             lhsWord = "four";
251             break;
252         case 5:
253             lhsWord = "five";
254             break;
255         case 6:
256             lhsWord = "six";
257             break;
258         case 7:
259             lhsWord = "seven";
260             break;
261         case 8:
262             lhsWord = "eight";
263             break;
264         case 9:
265             lhsWord = "nine";
266             break;
267         default:
268             lhsWord = "";
269             break;
270     }
271 
272     // Map the first digit of rhs to its English word
273     string rhsWord;
274     switch (rhsFirstDigit)
275     {
276         case 1:
277             rhsWord = "one";
278             break;
279         case 2:
280             rhsWord = "two";
281             break;
282         case 3:
283             rhsWord = "three";
284             break;
285         case 4:
286             rhsWord = "four";
287             break;
288         case 5:
289             rhsWord = "five";
290             break;
291         case 6:
292             rhsWord = "six";
293             break;
294         case 7:
295             rhsWord = "seven";
296             break;
297         case 8:
298             rhsWord = "eight";
299             break;
300         case 9:
301             rhsWord = "nine";
302             break;
303         default:
304             rhsWord = "";
305             break;
306     }
307 
308     // Compare the first characters of the English words alphabetically
309     return lhsWord[0] < rhsWord[0];
310 
311     return true;
312 }
313 
314 bool increasing(int lhs, int rhs)
315 {
316     return lhs < rhs;
317 }
318 
319 bool decreasing(int lhs, int rhs)
320 {
321     return lhs > rhs;
322 }
