 1 #include <iostream>
  2 #include <fstream>
  3 using namespace std;
  4 
  5 class ConfigFileError : public exception
  6 {   
  7     public:
  8         const char * what() const throw()
  9         {   
 10             return "Configuration file is badly formed";
 11         }
 12 };
 13 
 14 class ConfigFileMissingKey : public ConfigFileError
 15 {   
 16     public:
 17         const char * what() const throw()
 18         {   
 19             return "Missing Key";
 20         }
 21 };
 22 
 23 class ConfigFileBadKey : public ConfigFileError
 24 {   
 25     public: 
 26         const char * what() const throw()
 27         {   
 28             return "Bad key specification";
 29         }
 30 };
 31 
 32 class ConfigFileMissingSeparator : public ConfigFileError
 33 {
 34     public:
 35         const char * what() const throw()
 36         {
 37             return "Missing separator";
 38         }
 39 };
 40 
 41 class ConfigFile
 42 {
 43     private:
 44         bool contains_separator(string line, char sep = '=')
 45         {
 46             bool result;
 47             int length = line.length();
 48             int count = 0;
 49             for (int i = 0; i < length; i++)
 50             {
 51                 if (line[i] == sep)
 52                 {
 53                     count++;
 54                 }
 55             }
 56 
 57             if (count == 0)
 58             {
 59                result = false;
 60             }
 61             else
 62             {
 63                result = true;
 64             }
 65             return result;
 66         }
 67 
 68         bool is_name_valid(string name)
 69         {
 70             bool result;
 71             if ((name[0] == '_') || (isalpha(name[0])))
 72             {
 73                 result = true;
 74             }
 75             else
 76             {
 77                 result = false;
 78             }
 79             return result;
 80         }
 81 
 82         bool is_comment(string line)
 83         {
 84             bool result;
 85             if (line[0] == ';')
 86             {
 87                 result = true;
 88             }
 89             else
 90             {
 91                 result = false;
 92             }
 93             return result;
 94         }
 95 
 96         bool is_missing_key(string line)
 97         {
 98             bool result;
 99             if (line[0] == '=')
 100             {
101                 result = true;
102             }
103             else
104             {
105                 result = false;
106             }
107             return result;
108         }
109     public:
110         bool load(string filename)
111         {
112             string line;
113             ifstream fin;
114             fin.open(filename);
115             while (getline(fin, line))
116             {
117             // stores a line of text from the file
118 
119             // one exception check
120             if ((line != "") && (!is_comment(line)))
121             {
122                 if (is_missing_key(line))
123                 {
124                     throw ConfigFileMissingKey();
125                 }
126                 else if (!is_name_valid(line))
127                 {
128                     throw ConfigFileBadKey();
129                 }
130                 else if (!contains_separator(line))
131                 {
132                     throw ConfigFileMissingSeparator();
133                 }
134             }
135             }
136             fin.close();
137             return true;
138         }
139 };
140 
141 int main()
142 {
143     ConfigFile config;
144 
145     try
146     {
147         if (config.load("config.ini"))
148         {
149             cout << "Config file verified" << endl;
150         }
151     }
152 
153     catch (ConfigFileMissingKey & ex)
154     {
155         cerr << ex.what() << endl;
156     }
157     catch (ConfigFileBadKey & ex)
158     {
159         cerr << ex.what() << endl;
160     }
161     catch (ConfigFileMissingSeparator & ex)
162     {
163         cerr << ex.what() << endl;
164     }
165     catch (...)
166     {
167         cerr << "ERROR!" << endl;
168     }
169     return 0;
170 }
